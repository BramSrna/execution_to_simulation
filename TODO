- Mixing simulator with synthetic data
- Simulator with non-static states (i.e. situation where you cannot easily define states)
- Multi-client simulation (i.e. multiple bots executing in a simulator simulataneously)
- Continuous simulation / partial state information
- Can combine compatable simulators or break simulators down into components


End goal:
Simulate everything at once
- Will need to be able to support an extremely large amount of threads
- Combine continous simulation, discrete state computation, and ML to combine active simulation alongside JIT computation at read-time


Main use case:
1. User programmatically sets up initial simulation environment. This includes the output information that can be read.
2. User connects sensor datastream(s) to simulator (Ex. A camera may be used to determine the actual dimensions and appearance of an area)
3. The sensor data is then used to update the simulation environment as data is collected
4. Once the simulator is complete, it can be used for ML and other tasks. The simulator can be partially complete for retrieving partial output information.

There are three parts to the project:
- Execution to simulation
- Simulator core (scaling, state prediction, etc)
- Task improvement using simulator

What would I define version 1.0 as?
- Simulator hyperparameters defined using metadata (YAML?) (ex. When is simulator "done"? What other simulators is it compatable with?)
- Simulator can be entirely initialized using sensor data, using synthetic data, or a combination
- Datastreams can be connected to simulator to provide new data read from production (ex. cameras, GPS)
- New synthetic data can be added to the simulator using datastreams (chain simulators together?)
- Simulator supports both discrete state simulation as well as continuous simulation (state vs. stateless)
- Support state prediction using ML (i.e. I don't know what the new state would be after the given action, but here's a best guess). This can be done JIT at read-time.
- Support multi-client simulation (i.e. multiple "users" (bots) using a simulator simultaneously)
- Can combine compatable simulators or break up simulators into seperate components
- Support task execution and iteration against the simulator (ML library)
- Integrate and support proof of simulation for iteration proof and federated simulator creation
- Support simulator test cases for proof of simulation
- Simulation can be visualized
- Simulator can be fast-forwarded, rewound, and paused. Alternatively, single states can be simulated.

What is out-of-scope for the simulator?
- Starts with monitoring initial execution for simulator creation
- Ends with task optimization
- Anything that pertains to only one simulator instance
- Avoid UI outside of the simulation visualizer. Visualizer shall be read-only

Sample simulator life cycle:
- Define initial simulator hyper parameters and bounds
- Initialize proof of simulation chain
- Define initial datastreams for task monitoring
- Allow task to run a few times to build up initial simulator
- Add some synthetic data to round out simulator corner cases
- Define task optimization test cases
- Iterate on simulator and task
- User monitors optimization using visualizer
- User provides new synthetic data and manual task manipulations as needed